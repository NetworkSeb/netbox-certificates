# Generated by Django 5.1.8 on 2025-04-27 19:50

import django.db.models.deletion
import taggit.managers
import utilities.json
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dcim', '0200_populate_mac_addresses'),
        ('extras', '0123_journalentry_kind_default'),
        ('tenancy', '0017_natural_ordering'),
        ('virtualization', '0048_populate_mac_addresses'),
    ]

    operations = [
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('cn', models.CharField(max_length=256, unique=True)),
                ('san', models.CharField(blank=True, max_length=512, null=True)),
                ('term', models.CharField(default='398', max_length=32)),
                ('status', models.CharField(default='planned', max_length=32)),
                ('type', models.CharField(default='ev', max_length=32)),
                ('content', models.TextField(blank=True, max_length=32000, null=True)),
                ('vault_url', models.URLField(blank=True, max_length=256, null=True)),
                ('fs_cert_location', models.TextField(blank=True, max_length=300, null=True)),
                ('fs_key_location', models.TextField(blank=True, max_length=300, null=True)),
                ('install_type', models.CharField(default='pem', max_length=32)),
                ('service_commands', models.TextField(blank=True, max_length=32000, null=True)),
                ('service_check', models.TextField(blank=True, max_length=300, null=True)),
                ('service_lb', models.BooleanField(default=False, null=True)),
                ('automated', models.BooleanField(default=False, null=True)),
                ('comments', models.TextField(blank=True)),
                ('business_contact', models.ManyToManyField(blank=True, related_name='business_contact', to='tenancy.contact')),
                ('business_group', models.ManyToManyField(blank=True, related_name='business_group', to='tenancy.contactgroup')),
                ('device', models.ManyToManyField(blank=True, to='dcim.device')),
                ('infrastructure_contact', models.ManyToManyField(blank=True, related_name='infrastructure_contact', to='tenancy.contact')),
                ('infrastructure_group', models.ManyToManyField(blank=True, related_name='infrastructure_group', to='tenancy.contactgroup')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('technical_group', models.ManyToManyField(blank=True, related_name='technical_owner', to='tenancy.contactgroup')),
                ('technical_owner', models.ManyToManyField(blank=True, related_name='technical_contact', to='tenancy.contact')),
                ('vm', models.ManyToManyField(blank=True, to='virtualization.virtualmachine')),
            ],
            options={
                'ordering': ('cn',),
            },
        ),
        migrations.CreateModel(
            name='CertificateAuthority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('acme_url', models.URLField(blank=True, max_length=256, null=True)),
                ('admin_url', models.URLField(max_length=256)),
                ('status', models.CharField(default='planned', max_length=32)),
                ('comments', models.TextField(blank=True)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='CertificateInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('ca_reference', models.CharField(max_length=100)),
                ('issuer', models.CharField(blank=True, max_length=256, null=True)),
                ('pubkey_algorithm', models.CharField(blank=True, max_length=100, null=True)),
                ('pubkey_size', models.CharField(blank=True, max_length=100, null=True)),
                ('pubkey_sha1', models.CharField(blank=True, max_length=100, null=True)),
                ('term', models.IntegerField(blank=True, null=True)),
                ('serial_number', models.CharField(max_length=100, unique=True)),
                ('issue_date', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(default='planned', max_length=32)),
                ('csr', models.TextField(blank=True, max_length=32000, null=True)),
                ('key', models.TextField(blank=True, max_length=32000, null=True)),
                ('pem', models.TextField(blank=True, max_length=32000, null=True)),
                ('comments', models.TextField(blank=True)),
                ('ca', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='certificates', to='netbox_certificates.certificateauthority')),
                ('certificate', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='netbox_certificates.certificate')),
                ('infrastructure_installer', models.ManyToManyField(blank=True, related_name='infrastructure_installer', to='tenancy.contact')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ('ca_reference',),
            },
        ),
    ]
